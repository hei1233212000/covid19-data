service: covid19-data
frameworkVersion: '3'

package:
  exclude:
    - .idea/**
    - deployment/**
    - '*.sh'
    - package.json
    - package-lock.json
    - README.adoc
    - serverless.yml
    - sample/**
    - test/**

provider:
  name: aws
  region: ${opt:region, self:custom.region}
  runtime: nodejs12.x
  timeout: 30 # in second
  stackName: ${self:service}-stack
  stackTags: # Optional CF stack tags
    project: ${self:custom.project}
  lambdaHashingVersion: "20201221"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: "arn:aws:s3:::${self:custom.bucketName}/*"

custom:
  region: ap-southeast-1
  project: covid-19
  rootDomain: drunkard-pig.com
  siteName: data.covid-19.${self:custom.rootDomain}
  certArn:  ${param:certArn, ''}
  s3BucketLogBucket: ${self:custom.bucketName}-logs
  bucketName: ${self:custom.siteName}
  remover:
    buckets:
      - ${self:custom.bucketName}
      - ${self:custom.s3BucketLogBucket}

functions:
  import-covid-19-data:
    handler: import-data/import-data-handler.importCovid19Data
    events:
      # every 15 minutes
      - schedule: cron(0/15 * * * ? *)
    environment:
      COVID19_DATA_URL: "https://covid19.who.int/WHO-COVID-19-global-data.csv"
      VACCiNATION_DATA_URL: "https://covid19.who.int/who-data/vaccination-data.csv"
      BUCKET: ${self:custom.bucketName}
      DATA_FILE_NAME: "covid19-data.gzip"

resources:
  # AWS CloudFormation Template
  Resources:
    Covid19DataLogBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        AccessControl: LogDeliveryWrite
        BucketName: ${self:custom.s3BucketLogBucket}
        LifecycleConfiguration:
          Rules:
            - Id: ExpireRule
              Status: Enabled
              ExpirationInDays: 30
    Covid19DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
              AllowedOrigins:
                - '*'
              ExposedHeaders:
                - Date
              Id: myCORSRuleId1
              MaxAge: 900
        VersioningConfiguration:
          Status: Enabled
        AccessControl: PublicRead
        LoggingConfiguration:
          DestinationBucketName:
            Ref: Covid19DataLogBucket
          LogFilePrefix: bucket-log/
    # specifying the policies to make sure all files inside the Bucket are available
    Covid19DataBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Covid19DataBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.bucketName}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    Covid19DataCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.bucketName}.s3.${self:provider.region}.amazonaws.com
              Id: Covid19DataCloudFrontDistributionOrigin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
                OriginSSLProtocols:
                  - TLSv1
                  - TLSv1.1
                  - TLSv1.2
          HttpVersion: http2
          Enabled: true
          Aliases:
            - ${self:custom.bucketName}
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
            TargetOriginId: Covid19DataCloudFrontDistributionOrigin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId:
              # Managed-CachingDisabled
              4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId:
              # Managed-UserAgentRefererHeaders
              acba4595-bd28-49b8-b9fe-13317c0390fa
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certArn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2019
            # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#access-logs-choosing-s3-bucket
          Logging:
            Bucket: { "Fn::GetAtt": [ "Covid19DataLogBucket", "DomainName" ] }
            IncludeCookies: false
            Prefix: cloud-front-log/
    # add A record to link the custom domain to CloudFront
    Covid19DataRoute53RecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: "${self:custom.rootDomain}."
        RecordSets:
          - Name: ${self:custom.siteName}
            Type: A
            AliasTarget:
              # it must be Z2FDTNDATAQYW2
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: { "Fn::GetAtt": [ "Covid19DataCloudFrontDistribution", "DomainName" ] }

plugins:
  - serverless-s3-remover